#######################################################
# 使用说明
# 1. 使用openresty动态解析ingress vip进入的host, 根据host解析出需要访问的svc, 然后修改upstream进行转发
# 2. 动态修改upstream时，需要go-dnsmasq的支持，go-dnsmasq会获取集群的dns信息，这样才支持通过动态变换upstream
#######################################################
apiVersion: extensions/v1beta1 ## 稳定的版本，这里不要改动
kind: Deployment ## 用于启动服务
metadata:
  name: openresty-proxy # 变量 -应用中心的名字
  namespace: DEPLOY_ENV # 变量 -根据命名规范进行替换，例如d1, b1等
  labels:
    app: openresty-proxy # 变量 -应用中心的名字
spec:
  replicas: 1 ## 默认启动一个pod, 降低资源消耗
  minReadySeconds: 10   ## 滚动升级时10s后认为该pod就绪
  revisionHistoryLimit: 5
  strategy:
    rollingUpdate:  ## 由于replicas为3,则整个升级,pod个数在2-4个之间
      maxSurge: 1      ## 滚动升级时会先启动1个pod
      maxUnavailable: 1 ## 滚动升级时允许的最大Unavailable的pod个数
  template:
    metadata:
      labels:
        app: openresty-proxy ## 变量 -应用中心的名字
    spec:
      terminationGracePeriodSeconds: 60 ##k8s将会给应用发送SIGTERM信号，可以用来正确、优雅地关闭应用,默认为30秒
      imagePullSecrets: ## 腾讯云上访问私有仓库使用的secret，不需修改
      - name: registry-secret
      - name: qcloudregistrykey
      - name: tencenthubkey
      containers:
      - name: openresty-proxy # 变量 -应用中心的名字
        image: harbor.missfresh.net/library/openresty-proxy:centos ## 变量 - 私服地址/testing/应用名:分支名
        imagePullPolicy: Always ## default: IfNotPresent, 使用Always确保拉取最新的镜像
        resources:
          ## keep request = limit to keep this container in guaranteed class
          requests: ## 资源分配，默认CPU 1核，内存 512MB~4GB
            cpu: "250m"
            memory: 512Mi
          limits:
            cpu: "500m"
            memory: 2Gi
        terminationMessagePath: /dev/termination-log
        volumeMounts: ## 用于保证pod和宿主机的时间一致
        - mountPath: /etc/localtime
          name: tz-config
          readOnly: true
        env: # 变量，用于替换配置文件中的系统变量
          - name: NGINX_ENV ## 环境信息，properties中使用，wiki: http://wiki.missfresh.net/pages/viewpage.action?pageId=37336541
            value: "DEPLOY_ENV" # 变量， 根据规范替换为,b1,b2, d1,d2等
        ports:
          - name: http
            containerPort: 80 ## 容器使用的端口，默认一律使用8080
      - name: dnsmasq # https://github.com/janeczku/go-dnsmasq
        image: "janeczku/go-dnsmasq:release-1.0.7"
        args:
          - --listen
          - "127.0.0.1:53"
          - --default-resolver
          - --append-search-domains
          - --hostsfile=/etc/hosts
          - --verbose
      restartPolicy: Always
      securityContext: {}
      serviceAccountName: ""
      volumes:
      - hostPath: ## 用于保证pod和宿主机的时间一致
          path: /usr/share/zoneinfo/Asia/Shanghai
        name: tz-config
---
kind: Service ## 创立service, 用于暴露服务
apiVersion: v1
metadata:
  name: openresty-proxy # 变量 -应用中心的名字
  namespace: DEPLOY_ENV ## 变量 -根据命名规范进行替换，例如d1, b1等
  labels:
    app: openresty-proxy ## 变量 -应用中心的名字
spec:
  type: NodePort #变量 可选项NodePort 使用ClusterIP方式。如果需要对外暴露服务，需要使用NodePort
  ports:
  - port: 80 ## 容器之间访问的端口（通过应用中心获取），容器内可以使用 serviceName.namespaceName:clusterPort, e.g. helloworld.testing:80, 80端口可忽略使用helloworld.testing直接访问对应应用
    targetPort: 80 ## 容器自身启动使用端口
    protocol: TCP
  selector:
    app: openresty-proxy # 变量 -应用中心的名字



